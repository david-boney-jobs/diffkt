/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

package org.diffkt.ops

import io.kotest.core.spec.style.AnnotationSpec
import io.kotest.data.forAll
import io.kotest.data.row
import org.diffkt.*
import testutils.floats
import testutils.shouldBeExactly
import testutils.shouldBeNear
import kotlin.test.*

class ConvolveTest : AnnotationSpec() {

    @Test
    fun `Conv2D requires images rank is 4`() {
        val images = FloatTensor.zeros(Shape(5, 5))
        val filters = FloatTensor.zeros(Shape(1, 3, 3, 1))
        val e = assertFails { conv2d(images, filters, 1, 1) }
        val msg = e.localizedMessage
        assertNotNull(msg)
        assertTrue(msg.contains("signal"))
    }

    @Test
    fun `Conv2D requires filters rank is 4`() {
        val images = FloatTensor.zeros(Shape(1, 5, 5, 1))
        val filters = FloatTensor.zeros(Shape(1, 3, 3, 1, 1))
        val e = assertFails { conv2d(images, filters, 1, 1) }
        val msg = e.localizedMessage
        assertNotNull(msg)
        assertTrue(msg.contains("filter"))
    }

    @Test fun `conv2d on single multi-channel image`() {
        val values = ConvolveTestValues.SingleMultiChannelImage
        val output = conv2d(
                ConvolveTestValues.SingleMultiChannelImage.tensor,
                ConvolveTestValues.SingleMultiChannelImage.filter, 1, 1)
        output shouldBeExactly ConvolveTestValues.SingleMultiChannelImage.expectedOutput
    }

    @Suppress("NAME_SHADOWING")
    @Test fun `conv2d on with custom padding`() {
        val values = ConvolveTestValues.CustomPadding
        val filter = ConvolveTestValues.CustomPadding.filter
        val signal = ConvolveTestValues.CustomPadding.tensor
        val f = { signal: DTensor, filter: DTensor -> conv2d(signal, filter, ConvolveTestValues.CustomPadding.hstride, ConvolveTestValues.CustomPadding.vstride, ConvolveTestValues.CustomPadding.padding) }
        val fSum = { signal: DTensor, filter: DTensor -> conv2d(signal, filter, ConvolveTestValues.CustomPadding.hstride, ConvolveTestValues.CustomPadding.vstride, ConvolveTestValues.CustomPadding.padding).sum()}
        val output = f(signal, filter)
        output shouldBeExactly ConvolveTestValues.CustomPadding.expectedOutput
        val signalGrad = reverseDerivative(signal) { x: DTensor -> fSum(x, filter) }
        val filterGrad = reverseDerivative(filter) { x: DTensor -> fSum(signal, x) }
        signalGrad shouldBeExactly ConvolveTestValues.CustomPadding.expectedTensorGrad
        filterGrad shouldBeExactly ConvolveTestValues.CustomPadding.expectedFilterGrad
    }

    @Suppress("NAME_SHADOWING")
    @Test fun `conv2D from sampled MNIST data`() {
        val values = ConvolveTestValues.SampledMnistData
        val signal = ConvolveTestValues.SampledMnistData.tensor
        val filter = ConvolveTestValues.SampledMnistData.filter
        val fSum = { signal: DTensor, filter: DTensor -> conv2d(signal, filter, 1, 1).sum()}
        val signalGrad = reverseDerivative(signal) { x: DTensor -> fSum(x, filter) }
        val filterGrad = reverseDerivative(filter) { x: DTensor -> fSum(signal, x) }
        signalGrad.shouldBeNear(ConvolveTestValues.SampledMnistData.expectedTensorGrad, 1e-5f)
        filterGrad.shouldBeNear(ConvolveTestValues.SampledMnistData.expectedFilterGrad, 1e-5f)
    }

    @Suppress("NAME_SHADOWING")
    @Test
    suspend fun conv2d() {
        forAll(
            row(ConvolveTestValues.Sanity),
            row(ConvolveTestValues.SingleFlatInput),
            row(ConvolveTestValues.SingleFlatInputStrided),
            row(ConvolveTestValues.MultipleTripleChannelImages)
        ) { values ->
            val signal = values.tensor
            val filter = values.filter
            val output = conv2d(signal, filter, values.hstride, values.vstride)
            output shouldBeExactly  values.expectedOutput
            val fSum = { signal: DTensor, filter: DTensor -> conv2d(signal, filter, values.hstride, values.vstride).sum()}
            val signalGrad = reverseDerivative(signal) { x: DTensor -> fSum(x, filter) }
            val filterGrad = reverseDerivative(filter) { x: DTensor -> fSum(signal, x) }
            signalGrad.shouldBeNear(values.expectedTensorGrad, 1e-6f)
            filterGrad.shouldBeNear(values.expectedFilterGrad, 1e-6f)

        }
    }
}

object ConvolveTestValues {
    interface StandardTestValues {
        val tensor: FloatTensor
        val filter: FloatTensor
        val hstride: Int
        val vstride: Int
        val expectedOutput: FloatTensor
        val seed: FloatTensor? get() = null
        val expectedTensorGrad: FloatTensor
        val expectedFilterGrad: FloatTensor
    }

    object Sanity : StandardTestValues {
        override val filter = StridedFloatTensor(Shape(2, 1, 2, 3), floats(6, repeat = 2))
        override val tensor = StridedFloatTensor(Shape(2, 3, 3, 3), floats(27, repeat = 2))
        override val hstride = 1
        override val vstride = 2
        override val expectedOutput = StridedFloatTensor(
                Shape(2, 2, 3, 2),
                floatArrayOf(
                        91f, 91f, 154f, 154f, 50f, 50f,
                        469f, 469f, 532f, 532f, 158f, 158f,
                        91f, 91f, 154f, 154f, 50f, 50f,
                        469f, 469f, 532f, 532f, 158f, 158f
                )
        )
        override val expectedTensorGrad = StridedFloatTensor(
                Shape(2, 3, 3, 3),
                floatArrayOf(
                        2f, 4f, 6f, 10f, 14f, 18f, 10f, 14f, 18f,
                        0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
                        2f, 4f, 6f, 10f, 14f, 18f, 10f, 14f, 18f,
                        2f, 4f, 6f, 10f, 14f, 18f, 10f, 14f, 18f,
                        0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,
                        2f, 4f, 6f, 10f, 14f, 18f, 10f, 14f, 18f
                )
        )

        override val expectedFilterGrad = StridedFloatTensor(
                Shape(2, 1, 2, 3),
                floatArrayOf(
                        156f, 168f, 180f, 116f, 124f, 132f,
                        156f, 168f, 180f, 116f, 124f, 132f
                )
        )
    }

    object SingleFlatInput : StandardTestValues {
        override val tensor = StridedFloatTensor(Shape(1, 6, 6, 1), floats(36))
        override val filter = StridedFloatTensor(Shape(1, 5, 5, 1), floats(25))
        override val hstride = 1
        override val vstride = 1

        override val expectedOutput = StridedFloatTensor(
                Shape(1, 6, 6, 1),
                floatArrayOf(
                        1554f, 2142f, 2760f, 3030f, 2460f, 1869f,
                        2636f, 3564f, 4510f, 4820f, 3860f, 2894f,
                        3850f, 5140f, 6425f, 6750f, 5350f, 3970f,
                        5110f, 6760f, 8375f, 8700f, 6850f, 5050f,
                        3632f, 4756f, 5830f, 6040f, 4700f, 3422f,
                        2292f, 2958f, 3570f, 3690f, 2820f, 2013f
                )
        )
        override val expectedTensorGrad = StridedFloatTensor(
                Shape(1, 6, 6, 1),
                floatArrayOf(
                        63f, 90f, 120f, 120f, 102f, 81f,
                        114f, 160f, 210f, 210f, 176f, 138f,
                        180f, 250f, 325f, 325f, 270f, 210f,
                        180f, 250f, 325f, 325f, 270f, 210f,
                        174f, 240f, 310f, 310f, 256f, 198f,
                        153f, 210f, 270f, 270f, 222f, 171f
                )
        )
        override val expectedFilterGrad = StridedFloatTensor(
                Shape(1, 5, 5, 1),
                floatArrayOf(
                        184f, 240f, 300f, 260f, 216f,
                        290f, 375f, 465f, 400f, 330f,
                        420f, 540f, 666f, 570f, 468f,
                        410f, 525f, 645f, 550f, 450f,
                        376f, 480f, 588f, 500f, 408f
                )
        )
    }

    object SingleFlatInputStrided : StandardTestValues {
        override val filter = StridedFloatTensor(Shape(1, 5, 5, 1), floats(25))
        override val tensor = StridedFloatTensor(Shape(1, 6, 6, 1), floats(36))
        override val hstride = 2
        override val vstride = 2
        override val expectedOutput = StridedFloatTensor(
                Shape(1, 3, 3, 1),
                floatArrayOf(
                        3564f, 4820f, 2894f,
                        6760f, 8700f, 5050f,
                        2958f, 3690f, 2013f
                )
        )
        override val expectedTensorGrad = StridedFloatTensor(
                Shape(1, 6, 6, 1),
                floatArrayOf(
                        7f, 14f, 16f, 24f, 16f, 18f,
                        14f, 28f, 32f, 48f, 32f, 36f,
                        24f, 48f, 52f, 78f, 52f, 56f,
                        36f, 72f, 78f, 117f, 78f, 84f,
                        24f, 48f, 52f, 78f, 52f, 56f,
                        34f, 68f, 72f, 108f, 72f, 76f
                )
        )
        override val expectedFilterGrad = StridedFloatTensor(
                Shape(1, 5, 5, 1),
                floatArrayOf(
                        60f, 90f, 96f, 64f, 68f,
                        90f, 135f, 144f, 96f, 102f,
                        126f, 189f, 198f, 132f, 138f,
                        84f, 126f, 132f, 88f, 92f,
                        108f, 162f, 168f, 112f, 116f
                )
        )
    }

    object MultipleTripleChannelImages : StandardTestValues {
        override val filter = StridedFloatTensor(Shape(2, 3, 3, 3), floats(27) + floats(27))
        override val tensor = StridedFloatTensor(Shape(2, 6, 6, 3), floats(108) + floats(108))
        override val hstride = 1
        override val vstride = 1
        override val expectedOutput = StridedFloatTensor(
                Shape(2, 6, 6, 2),
                floatArrayOf(
                        3521f, 3521f, 5511f, 5511f, 6510f, 6510f, 7509f, 7509f, 8508f, 8508f, 5519f, 5519f,
                        7995f, 7995f, 11790f, 11790f, 12924f, 12924f, 14058f, 14058f, 15192f, 15192f, 9534f, 9534f,
                        13017f, 13017f, 18594f, 18594f, 19728f, 19728f, 20862f, 20862f, 21996f, 21996f, 13584f, 13584f,
                        18039f, 18039f, 25398f, 25398f, 26532f, 26532f, 27666f, 27666f, 28800f, 28800f, 17634f, 17634f,
                        23061f, 23061f, 32202f, 32202f, 33336f, 33336f, 34470f, 34470f, 35604f, 35604f, 21684f, 21684f,
                        11675f, 11675f, 15555f, 15555f, 16068f, 16068f, 16581f, 16581f, 17094f, 17094f, 9785f, 9785f,
                        3521f, 3521f, 5511f, 5511f, 6510f, 6510f, 7509f, 7509f, 8508f, 8508f, 5519f, 5519f,
                        7995f, 7995f, 11790f, 11790f, 12924f, 12924f, 14058f, 14058f, 15192f, 15192f, 9534f, 9534f,
                        13017f, 13017f, 18594f, 18594f, 19728f, 19728f, 20862f, 20862f, 21996f, 21996f, 13584f, 13584f,
                        18039f, 18039f, 25398f, 25398f, 26532f, 26532f, 27666f, 27666f, 28800f, 28800f, 17634f, 17634f,
                        23061f, 23061f, 32202f, 32202f, 33336f, 33336f, 34470f, 34470f, 35604f, 35604f, 21684f, 21684f,
                        11675f, 11675f, 15555f, 15555f, 16068f, 16068f, 16581f, 16581f, 17094f, 17094f, 9785f, 9785f
                )
        )
        override val expectedTensorGrad = StridedFloatTensor(
                Shape(2, 6, 6, 3),
                floatArrayOf(
                        56f, 64f, 72f, 102f, 114f, 126f, 102f, 114f, 126f, 102f, 114f, 126f, 102f, 114f, 126f, 80f, 88f, 96f,
                        138f, 150f, 162f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 174f, 186f, 198f,
                        138f, 150f, 162f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 174f, 186f, 198f,
                        138f, 150f, 162f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 174f, 186f, 198f,
                        138f, 150f, 162f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 174f, 186f, 198f,
                        128f, 136f, 144f, 210f, 222f, 234f, 210f, 222f, 234f, 210f, 222f, 234f, 210f, 222f, 234f, 152f, 160f, 168f,
                        56f, 64f, 72f, 102f, 114f, 126f, 102f, 114f, 126f, 102f, 114f, 126f, 102f, 114f, 126f, 80f, 88f, 96f,
                        138f, 150f, 162f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 174f, 186f, 198f,
                        138f, 150f, 162f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 174f, 186f, 198f,
                        138f, 150f, 162f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 174f, 186f, 198f,
                        138f, 150f, 162f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 234f, 252f, 270f, 174f, 186f, 198f,
                        128f, 136f, 144f, 210f, 222f, 234f, 210f, 222f, 234f, 210f, 222f, 234f, 210f, 222f, 234f, 152f, 160f, 168f
                )
        )
        override val expectedFilterGrad = StridedFloatTensor(
                Shape(2, 3, 3, 3),
                floatArrayOf(
                        2150f, 2200f, 2250f, 2670f, 2730f, 2790f, 2300f, 2350f, 2400f,
                        3120f, 3180f, 3240f, 3852f, 3924f, 3996f, 3300f, 3360f, 3420f,
                        3050f, 3100f, 3150f, 3750f, 3810f, 3870f, 3200f, 3250f, 3300f,
                        2150f, 2200f, 2250f, 2670f, 2730f, 2790f, 2300f, 2350f, 2400f,
                        3120f, 3180f, 3240f, 3852f, 3924f, 3996f, 3300f, 3360f, 3420f,
                        3050f, 3100f, 3150f, 3750f, 3810f, 3870f, 3200f, 3250f, 3300f
                )
        )
    }

    object CustomPadding {
        val filter = StridedFloatTensor(Shape(1, 5, 5, 1), floats(25))
        val tensor = StridedFloatTensor(Shape(1, 6, 6, 1), floats(36))
        val hstride = 1
        val vstride = 1
        val padding = Convolve.Padding2D(1, 2)

        val expectedOutput = StridedFloatTensor(
                Shape(1, 4, 6, 1),
                floatArrayOf(
                        2636.0f, 3564.0f, 4510.0f, 4820.0f, 3860.0f,
                        2894.0f, 3850.0f, 5140.0f, 6425.0f, 6750.0f,
                        5350.0f, 3970.0f, 5110.0f, 6760.0f, 8375.0f,
                        8700.0f, 6850.0f, 5050.0f, 3632.0f, 4756.0f,
                        5830.0f, 6040.0f, 4700.0f, 3422.0f
                )
        )
        val expectedTensorGrad = StridedFloatTensor(
                Shape(1, 6, 6, 1),
                floatArrayOf(
                        27.0f, 40.0f, 55.0f, 55.0f, 48.0f,
                        39.0f, 63.0f, 90.0f, 120.0f, 120.0f,
                        102.0f, 81.0f, 114.0f, 160.0f, 210.0f,
                        210.0f, 176.0f, 138.0f, 174.0f, 240.0f,
                        310.0f, 310.0f, 256.0f, 198.0f, 153.0f,
                        210.0f, 270.0f, 270.0f, 222.0f, 171.0f,
                        117.0f, 160.0f, 205.0f, 205.0f, 168.0f, 129.0f
                )
        )
        val expectedFilterGrad = StridedFloatTensor(
                Shape(1, 5, 5, 1),
                floatArrayOf(
                        102.0f, 135.0f, 171.0f, 150.0f, 126.0f,
                        184.0f, 240.0f, 300.0f, 260.0f, 216.0f,
                        280.0f, 360.0f, 444.0f, 380.0f, 312.0f,
                        376.0f, 480.0f, 588.0f, 500.0f, 408.0f,
                        318.0f, 405.0f, 495.0f, 420.0f, 342.0f
                )
        )
    }

    object SingleMultiChannelImage {
        val tensor = StridedFloatTensor(Shape(1, 6, 6, 3), floats(108))
        val filter = StridedFloatTensor(Shape(2, 3, 3, 3), floats(54))
        val expectedOutput = StridedFloatTensor(
                Shape(1, 6, 6, 2),
                floatArrayOf(
                        3521f, 7571f, 5511f, 12315f, 6510f, 14772f, 7509f, 17229f, 8508f, 19686f, 5519f, 13457f,
                        7995f, 18444f, 11790f, 28557f, 12924f, 31878f, 14058f, 35199f, 15192f, 38520f, 9534f, 25815f,
                        13017f, 32214f, 18594f, 48483f, 19728f, 51804f, 20862f, 55125f, 21996f, 58446f, 13584f, 38613f,
                        18039f, 45984f, 25398f, 68409f, 26532f, 71730f, 27666f, 75051f, 28800f, 78372f, 17634f, 51411f,
                        23061f, 59754f, 32202f, 88335f, 33336f, 91656f, 34470f, 94977f, 35604f, 98298f, 21684f, 64209f,
                        11675f, 39053f, 15555f, 57351f, 16068f, 59322f, 16581f, 61293f, 17094f, 63264f, 9785f, 41051f
                )
        )
    }

    object SampledMnistData {
        val tensor = StridedFloatTensor(
                Shape(1, 28, 28, 1),
                floatArrayOf(
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.005411765f, 0.009333333f, 0.008509804f, 0.0026666669f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.005882353f, 0.009960785f,
                        0.009960785f, 0.009960785f, 0.009098039f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0024705883f, 0.008784314f, 0.009960785f, 0.0056862747f, 0.009960785f, 0.009411764f, 8.627451E-4f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 5.8823527E-4f, 0.00627451f, 0.009921568f, 0.009960785f, 0.009960785f, 0.0073333336f,
                        0.009960785f, 0.0070588235f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0072156866f,
                        0.009960785f, 0.0072156866f, 0.008117647f, 0.009960785f, 0.009960785f, 0.009725491f, 0.002f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0048235296f, 0.009882353f, 0.008078432f, 6.666667E-4f, 0.0018431373f, 0.009960785f, 0.009960785f, 0.005019608f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0089803925f, 0.009960785f, 0.0016862745f,
                        0.0f, 0.0064705885f, 0.009960785f, 0.0062352945f, 2.3529412E-4f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0089803925f, 0.009294118f, 9.019608E-4f, 0.0016470589f, 0.0092156865f, 0.00854902f, 9.411765E-4f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.008352941f, 0.009960785f, 0.004117647f, 0.008313726f, 0.009686274f,
                        0.0019607844f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.002352941f,
                        0.009764706f, 0.009960785f, 0.009960785f, 0.005019608f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0054509807f, 0.009960785f, 0.009960785f, 0.006392157f, 3.137255E-4f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.006431373f, 0.009960785f, 0.009529412f, 0.009960785f, 0.003490196f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0021960784f, 0.009764706f,
                        0.0069411765f, 0.0019215686f, 0.0092156865f, 0.007921569f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 2.745098E-4f, 0.008352941f, 0.009764706f, 0.0019607844f, 0.0f, 0.008313726f, 0.009686274f, 0.0016078432f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0027058825f, 0.009960785f, 0.006196079f, 0.0f, 0.0f,
                        0.008313726f, 0.009960785f, 0.0020392158f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.008313726f, 0.009960785f, 0.0011764705f, 0.0f, 0.0f, 0.008313726f, 0.009960785f, 0.0020392158f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.5686275E-4f, 0.0092156865f, 0.008352941f, 3.137255E-4f, 0.0f, 0.0014509804f, 0.009529412f, 0.00945098f,
                        0.001254902f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 7.4509805E-4f, 0.009411764f,
                        0.007843138f, 1.5686275E-4f, 1.9607844E-4f, 0.0075686276f, 0.009960785f, 0.0049411766f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.009098039f, 0.009960785f, 0.008313726f, 0.00854902f, 0.009960785f, 0.007647059f, 5.8823527E-4f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0026666669f, 0.008470588f, 0.009960785f,
                        0.009960785f, 0.006509804f, 5.490196E-4f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
                )
        )
        val filter = StridedFloatTensor(
                Shape(6, 5, 5, 1),
                floatArrayOf(
                        0.14627124f, -0.24155073f, 0.4501447f, -0.26451522f, 0.35127544f, -0.18351635f, -0.041815035f, 0.05147921f, -0.164343f, -0.40843862f, -0.29642662f,
                        -0.4844805f, -0.15243866f, -0.044095702f, 0.11618182f, -0.39636976f, 0.4487569f, -0.10406801f, -0.48413906f, -0.2579007f, -0.09231326f, -0.017957585f,
                        -0.42957565f, 0.33193406f, -0.45140052f, -0.47012928f, -0.26124546f, -0.48559585f, 0.24789052f, -0.20621541f, -0.24048448f, 0.2774627f, -0.21689503f,
                        0.37406877f, -0.11014315f, -0.05313044f, 0.19276066f, 0.22452159f, -0.35843882f, -0.30746192f, -0.15447786f, -0.041464992f, -0.4692609f, -0.41885802f,
                        0.016792111f, 0.21880811f, 0.36893308f, 0.14041352f, 0.24387845f, -0.4419281f, -0.11903041f, -0.32402006f, -0.33867893f, -0.44202128f, 0.18911119f,
                        0.08370904f, 0.08214827f, 0.13226752f, 0.362095f, -0.34550434f, -0.14850461f, -0.11066079f, -0.25078803f, 0.23750599f, -0.28066164f, -0.12286042f,
                        0.4102536f, -0.4255371f, -0.41782048f, -0.328081f, 0.29642186f, 0.19897944f, -0.4409725f, 0.32345045f, -0.17915958f, -0.010120792f, 0.32470465f, 0.3922947f,
                        -0.21033777f, 0.06943923f, 0.19626793f, -0.3234373f, 0.4272584f, -0.3064396f, 0.32439163f, -0.024084007f, 0.14553478f, 0.034401134f, -0.23765491f, 0.3514517f,
                        -0.41019422f, 0.1158526f, 0.2721652f, -0.4606312f, -0.32490054f, -0.16722763f, -0.08436586f, -0.34528264f, -0.39912176f, 0.03296096f, -0.3484819f, 0.038740493f,
                        0.09713699f, 0.10825999f, 0.22425902f, -0.3343786f, -0.3775166f, -0.03268762f, 0.47579867f, -0.14239983f, 0.13636106f, 0.30121088f, -0.29457778f, 0.272272f,
                        0.49048525f, 0.024726434f, -0.2553677f, 0.34981337f, 0.23419183f, 0.16017231f, 0.12637424f, 0.047509674f, 0.19279104f, -0.022427715f, -0.15779176f, 0.11578839f,
                        0.059836105f, -0.08259758f, 0.40821704f, -0.021102507f, 0.21694575f, 0.3675077f, 0.052597754f, -0.50322735f, -0.49494788f, 0.04114204f, -0.25565922f, -0.42076924f,
                        -0.18496321f, -0.46754277f, -0.35959885f, 0.33221775f, -0.24639174f, 0.07424868f, 0.16607094f, -0.47115803f, -0.1375057f, -0.2636811f, 0.26068252f, 0.32297102f
                )
        )
        val expectedTensorGrad = StridedFloatTensor(
                Shape(1, 28, 28, 1),
                floatArrayOf(
                        -2.335208f, -2.565137f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f,
                        -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f, -3.232960f,
                        -1.941158f, -1.310678f, -3.367014f, -5.069951f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f,
                        -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f, -6.305620f,
                        -6.305620f, -6.305620f, -3.595044f, -3.974813f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f,
                        -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f,
                        -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f,
                        -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f,
                        -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f,
                        -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f, -4.226823f, -5.191363f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f,
                        -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -7.301381f, -4.501711f, -5.257071f,
                        -3.170289f, -3.982323f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f,
                        -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f, -6.699108f,
                        -4.585140f, -5.744035f, -3.307203f, -4.357189f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f,
                        -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f, -5.896931f,
                        -5.896931f, -5.896931f, -4.044421f, -5.218966f
                )
        )
        val expectedFilterGrad = StridedFloatTensor(
                Shape(6, 5, 5, 1),
                floatArrayOf(
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f,
                        0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f, 0.85698026f
                )
        )
    }
}